//package org.team2.domain;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.web.bind.annotation.*;
//
//@Controller // This means that this class is a Controller
//@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
//public class UserController {
//    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepo userRepo;
//
//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam(required=false,name="username") String username
//            , @RequestParam(required=false,name="password") String password, @RequestParam(required=false,name="id") Integer id, @RequestParam(required=false,name="authorized") Boolean authorized) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setUsername(username);
//        n.setPassword(password);
//        n.setId(id);
//        n.setAuthorized(authorized);
//        userRepo.save(n);
//        return "Saved";
//    }
//
//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllRestaurants() {
//        // This returns a JSON or XML with the users
//        return userRepo.findAll();
//    }
//}


package org.team2.domain;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
//@RequestMapping(path="/user")
public class UserController{
    @Autowired private UserService service;

private UserRepo userRepo;


    @GetMapping("/user")

    public List<User> showUserList(Model model){

        List<User> listUsers = service.listAll();
        model.addAttribute("listUsers", listUsers);
        return listUsers;

    }


    @GetMapping("/user/new")
public String showNewFor(Model model){
        model.addAttribute("user", new User());
        return"saved";
    }


    @CrossOrigin
    @GetMapping(value="/users/{username}", produces = "application/json")
    public List<User> getUser(@RequestParam(value = "userName", defaultValue = "") String userName) {
        return userRepo.findByUsername(userName);
    }


@PutMapping("/user/save")
public String saveUser(User user){
    service.save(user);

            return "saved";
}

    @PostMapping("/user/register")
    public Iterable<User> registerUser(@RequestBody User newUser) {
        Iterable<User> users = userRepo.findAll();
        System.out.println("New user: " + newUser.toString());
        userRepo.save(newUser);
        return users;
    }



//    @PutMapping(path="/adduser")
//    public @ResponseBody List<User> addUser(@Param(value = "userName") String username, @Param(value = "password") String password, @Param(value = "id") Integer id, @Param(value = "authorized") Boolean authorized){
//
//        return userRepo.User(username, password , id , authorized);
//    };

//    @PostMapping(path="/adduser")
//    public @ResponseBody List<User> addUser(@RequestParam(value = "userName")String username, String password, Integer id, Boolean authorized){
//
//        return userRepo.addNewUser(username, password , id , authorized);
//    };
//    @PostMapping(path="/adduser")
//    public User addNewUser(@RequestParam(value = "userName")String username, String password, Integer Id, boolean authorized){
//
//        return userRepo.addNewUser(username, password , Id , authorized);
//    };
//@GetMapping("/user/edit/{id}")
//    public  String showEditForm(@PathVariable("id")Integer id, Model model){

}



